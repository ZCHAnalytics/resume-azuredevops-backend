
name: backend-infrastructure

trigger:
  branches:
    include:
      - main

  paths:
    include:
      - 'iaac/*'
      - 'azure-pipeline-backend.yml'

pool:
  name: 'Default'

variables:
  terraformWorkingDir: 'iaac'
  backendWorkingDir: 'backend'

  tfstateResourceGroup: 'tfstate-rg'
  tfstateStorageAccount: 'zchtfstatestorageacc'
  tfstateContainer: 'tfstate'
  tfstateKey: 'terraform.tfstate'

stages:
  - stage: PlanBackendInfra
    displayName: 'Plan Backend Infrastructure'
    jobs:
      - job: TerraformPlan
        displayName: 'Terraform Plan'
        pool:
          name: 'Default'
        steps: 
          - checkout: self

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'resume-sp-connection'
              scriptType: 'ps'
              scriptLocation: inlineScript
              inlineScript: |
                az --version 

          - task: TerraformTaskV4@0
            displayName: 'terraform Task to initialise'
            inputs: 
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'resume-sp-connection'
              backendAzureRmResourceGroupName: 'tfstate-rg'
              backendAzureRmStorageAccountName: 'zchtfstatestorageacc'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              environmentServiceNameAzureRM: 'resume-sp-connection'
              workingDirectory: '$(terraformWorkingDir)'


          - task: TerraformTaskV4@0
            displayName: 'Terraform Plan'
            inputs: 
              provider: 'azurerm'
              command: 'plan'
              backendServiceArm: 'resume-sp-connection'
              environmentServiceNameAzureRM: 'resume-sp-connection'
              workingDirectory: '$(terraformWorkingDir)'
              commandOptions: '-var-file="terraform.tfvars" -out=plan.tfplan'
          
          - task: PublishPipelineArtifact@1
            inputs: 
              targetpath: '$(terraformWorkingDir)/plan.tfplan'
              artifactName: 'terraform-plan'

  - stage: ApplyBackendInfra
    displayName: 'Apply Backend Infrastructure'
    dependsOn: PlanBackendInfra
    condition: succeeded()
    jobs:
      - job: TerraformApply
        displayName: 'terraform Apply'
        pool:
          name: 'Default'
        steps: 
        - checkout: self

        - task: AzureCLI@2
          inputs:
            azureSubscription: 'resume-sp-connection'
            scriptType: 'ps'
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Azure login done" 
              
        - task: DownloadPipelineArtifact@2
          inputs:
            artifactName: 'terraform-plan'
            targetPath: '$(terraformWorkingDir)'
            
        - task: TerraformTaskV4@0
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'resume-sp-connection'
            backendAzureRmResourceGroupName: '$(tfstateResourceGroup)'
            backendAzureRmStorageAccountName: '$(tfstateStorageAccount)'
            backendAzureRmContainerName: '$(tfstateContainer)'
            backendAzureRmKey: '$(tfstateKey)'
            workingDirectory: '$(terraformWorkingDir)'


        - task: TerraformTaskV4@0
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'resume-sp-connection'
            workingDirectory: '$(terraformWorkingDir)'
            commandOptions: '-auto-approve plan.tfplan'

        - script: | 
            echo "### Backend Infrastructure Deployed!" >> $(System.DefaultWorkingDirectory)

            Cosmos_KEY=$(terraform output -raw cosmosdb_primary_key || echo "")

            if [ -z "$Cosmos_KEY" ]; then
              echo "Error: cosmosdb_primary_key not found"
              exit 1
            fi

            FUNC_URL=$(terraform output -raw function_app_url | grep -E '^https://[^ ]+$' || echo "")

            echo "- **Function App Name**: zch-resume-function-app" >> $(System.DefaultWorkingDirectory)/summary.md
            echo "⏳ **Next Step**: Function code will be deployed automatically" >> $(System.DefaultWorkingDirectory)/summary.md
          
          workingDirectory: $(terraformWorkingDir)
          displayName: 'Output Summary'

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/summary.md'
            artifactName: 'infra-summary'