# ========================
# ‚úÖ PIPELINE: Deploy Resume Backend Infrastructure with Terraform
# ========================

# üéØ Trigger pipeline on changes to main branch and specific files
name: backend-infrastructure

trigger:
  branches:
    include:
      - main

  paths:
    include:
      - 'backend/iaac/**'
      - 'azure-pipelines/backend-infrastructure.yml'

# üèóÔ∏è Agent Pool
pool:
  name: 'Default'

# üîß Variables for directory paths and remote backend state configuration
variables:
  terraformWorkingDir: 'backend/iaac'
  backendWorkingDir: 'backend'

  tfstateResourceGroup: 'tfstate-ubds-rg'
  tfstateStorageAccount: 'tfstateubds7270'
  tfstateContainer: 'tfstateubds'
  tfstateKey: 'ubds.tfstate'

# ========================
# üîπ STAGE: Terraform Plan
# ========================
stages:
  - stage: PlanBackendInfra
    displayName: 'Plan Backend Infrastructure'
    jobs:
      - job: TerraformPlan
        displayName: 'Terraform Plan'
        pool:
          name: 'Default'
        steps: 
          - checkout: self

          # üîç Verify Terraform Configuration
          - task: PowerShell@2
            displayName: 'üîç Verify Terraform Backend Configuration'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "=== VERIFYING TERRAFORM CONFIGURATION ==="
                
                # Check for main.tf
                $mainTfPath = Join-Path '$(terraformWorkingDir)' 'main.tf'
                if (Test-Path $mainTfPath) {
                    Write-Host "‚úÖ Found main.tf"
                    $content = Get-Content $mainTfPath -Raw
                    if ($content -match 'backend\s+"azurerm"') {
                        Write-Host "‚úÖ Backend block found in main.tf"
                        Write-Host "Backend configuration:"
                        $content | Select-String -Pattern 'backend\s+"azurerm"\s*{[^}]*}' -AllMatches | ForEach-Object {
                            Write-Host $_.Matches[0].Value
                        }
                    } else {
                        Write-Error "‚ùå No backend block found in main.tf!"
                        exit 1
                    }
                } else {
                    Write-Error "‚ùå main.tf not found!"
                    exit 1
                }
                
                # Clean up any existing local state
                Write-Host ""
                Write-Host "üßπ Cleaning up any existing local state files..."
                $stateFiles = @('terraform.tfstate', 'terraform.tfstate.backup', '.terraform.lock.hcl')
                foreach ($file in $stateFiles) {
                    $filePath = Join-Path '$(terraformWorkingDir)' $file
                    if (Test-Path $filePath) {
                        Remove-Item $filePath -Force
                        Write-Host "   Removed: $file"
                    }
                }
                
                # Remove .terraform directory
                $terraformDir = Join-Path '$(terraformWorkingDir)' '.terraform'
                if (Test-Path $terraformDir) {
                    Remove-Item $terraformDir -Recurse -Force
                    Write-Host "   Removed: .terraform directory"
                }
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          # üìå Verify Azure connection and backend storage
          - task: AzureCLI@2
            displayName: 'üîç Verify Backend Storage Account'
            inputs:
              azureSubscription: 'ubds-sp-connection'
              scriptType: 'ps'
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "=== VERIFYING BACKEND STORAGE ==="
                
                # Check if storage account exists
                $storageExists = az storage account show `
                    --name $(tfstateStorageAccount) `
                    --resource-group $(tfstateResourceGroup) `
                    --query "name" -o tsv 2>$null
                
                if ($storageExists) {
                    Write-Host "‚úÖ Storage account '$(tfstateStorageAccount)' exists"
                    
                    # Check if container exists
                    $containerExists = az storage container exists `
                        --account-name $(tfstateStorageAccount) `
                        --name $(tfstateContainer) `
                        --auth-mode login `
                        --query "exists" -o tsv
                    
                    if ($containerExists -eq "true") {
                        Write-Host "‚úÖ Container '$(tfstateContainer)' exists"
                    } else {
                        Write-Error "‚ùå Container '$(tfstateContainer)' does not exist!"
                        exit 1
                    }
                } else {
                    Write-Error "‚ùå Storage account '$(tfstateStorageAccount)' does not exist!"
                    exit 1
                }

          # üîß Terraform Init with detailed logging
          - task: TerraformTaskV4@0
            displayName: 'üöÄ Terraform Init with Remote Backend'
            inputs: 
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ubds-sp-connection'
              backendAzureRmResourceGroupName: '$(tfstateResourceGroup)'
              backendAzureRmStorageAccountName: '$(tfstateStorageAccount)'
              backendAzureRmContainerName: '$(tfstateContainer)'
              backendAzureRmKey: '$(tfstateKey)'
              environmentServiceNameAzureRM: 'ubds-sp-connection'
              workingDirectory: '$(terraformWorkingDir)'
              commandOptions: '-reconfigure'  # Force reconfigure to ensure backend is used

          # ‚úÖ Verify initialization succeeded
          - task: PowerShell@2
            displayName: '‚úÖ Verify Terraform Initialization'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "=== VERIFYING TERRAFORM INITIALIZATION ==="
                
                # Check .terraform directory
                $terraformDir = Join-Path '$(terraformWorkingDir)' '.terraform'
                if (Test-Path $terraformDir) {
                    Write-Host "‚úÖ .terraform directory created"
                    
                    # Check backend configuration
                    $backendConfig = Join-Path $terraformDir 'terraform.tfstate'
                    if (Test-Path $backendConfig) {
                        $config = Get-Content $backendConfig | ConvertFrom-Json
                        if ($config.backend.type -eq "azurerm") {
                            Write-Host "‚úÖ Backend type is 'azurerm'"
                            Write-Host "Backend configuration:"
                            Write-Host ($config.backend.config | ConvertTo-Json -Depth 3)
                        } else {
                            Write-Error "‚ùå Backend type is not 'azurerm': $($config.backend.type)"
                            exit 1
                        }
                    } else {
                        Write-Error "‚ùå Backend configuration file not found!"
                        exit 1
                    }
                } else {
                    Write-Error "‚ùå Terraform initialization failed - .terraform directory not found!"
                    exit 1
                }
                
                # Verify no local state file was created
                $localState = Join-Path '$(terraformWorkingDir)' 'terraform.tfstate'
                if (Test-Path $localState) {
                    Write-Error "‚ùå Local terraform.tfstate found - backend may not be configured correctly!"
                    exit 1
                } else {
                    Write-Host "‚úÖ No local state file (good - using remote backend)"
                }
              workingDirectory: '$(terraformWorkingDir)'

          # üìÑ Terraform Plan
          - task: TerraformTaskV4@0
            displayName: 'üìã Terraform Plan'
            inputs: 
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'ubds-sp-connection'
              workingDirectory: '$(terraformWorkingDir)'
              commandOptions: '-out=plan.tfplan -detailed-exitcode'

          # ‚¨ÜÔ∏è Publish plan file as pipeline artifact
          - task: PublishPipelineArtifact@1
            displayName: 'üì§ Publish Terraform Plan'
            inputs: 
              targetPath: '$(terraformWorkingDir)/plan.tfplan'
              artifactName: 'terraform-plan'

# ========================
# üî∏ STAGE: Terraform Apply
# ========================
  - stage: ApplyBackendInfra
    displayName: 'Apply Backend Infrastructure'
    dependsOn: PlanBackendInfra
    condition: succeeded()
    jobs:
      - job: TerraformApply
        displayName: 'Terraform Apply'
        pool:
          name: 'Default'
        steps: 
        - checkout: self

        # ‚¨áÔ∏è Download previously saved plan    
        - task: DownloadPipelineArtifact@2
          displayName: 'üì• Download Terraform Plan'
          inputs:
            artifactName: 'terraform-plan'
            targetPath: '$(terraformWorkingDir)'
        
        # üîß Re-init Terraform before apply
        - task: TerraformTaskV4@0
          displayName: 'üîÑ Terraform Re-Init for Apply'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'ubds-sp-connection'
            backendAzureRmResourceGroupName: '$(tfstateResourceGroup)'
            backendAzureRmStorageAccountName: '$(tfstateStorageAccount)'
            backendAzureRmContainerName: '$(tfstateContainer)'
            backendAzureRmKey: '$(tfstateKey)'
            environmentServiceNameAzureRM: 'ubds-sp-connection'
            workingDirectory: '$(terraformWorkingDir)'

        # üöÄ Apply the planned Terraform changes
        - task: TerraformTaskV4@0
          displayName: 'üöÄ Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'ubds-sp-connection'
            workingDirectory: '$(terraformWorkingDir)'
            commandOptions: 'plan.tfplan'

        # ‚úÖ Verify remote state was created
        - task: AzureCLI@2
          displayName: '‚úÖ Verify Remote State File Created'
          inputs:
            azureSubscription: 'ubds-sp-connection'
            scriptType: 'ps'
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "=== VERIFYING REMOTE STATE FILE ==="
              
              # Check if state file exists in blob storage
              $stateExists = az storage blob exists `
                  --account-name $(tfstateStorageAccount) `
                  --container-name $(tfstateContainer) `
                  --name $(tfstateKey) `
                  --auth-mode login `
                  --query "exists" -o tsv
              
              if ($stateExists -eq "true") {
                  Write-Host "‚úÖ Remote state file '$(tfstateKey)' successfully created!"
                  
                  # Get state file details
                  $blobDetails = az storage blob show `
                      --account-name $(tfstateStorageAccount) `
                      --container-name $(tfstateContainer) `
                      --name $(tfstateKey) `
                      --auth-mode login `
                      --query "{size:properties.contentLength, lastModified:properties.lastModified}" -o json | ConvertFrom-Json
                  
                  Write-Host "üìä State file details:"
                  Write-Host "   Size: $($blobDetails.size) bytes"
                  Write-Host "   Last Modified: $($blobDetails.lastModified)"
              } else {
                  Write-Error "‚ùå Remote state file was not created!"
                  exit 1
              }
              
              # Verify Terraform can read the state
              Write-Host ""
              Write-Host "üîç Verifying Terraform can read remote state:"
              cd $(terraformWorkingDir)
              terraform state list
              
              $stateItems = terraform state list
              if ($stateItems) {
                  Write-Host "‚úÖ Terraform successfully connected to remote state"
                  Write-Host "üìã Resources in state:"
                  $stateItems | ForEach-Object { Write-Host "   - $_" }
              } else {
                  Write-Warning "‚ö†Ô∏è No resources found in state (this is OK for first run)"
              }

        # üßæ Extract outputs and create summary
        - task: PowerShell@2
          displayName: 'üìä Create Deployment Summary'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "=== DEPLOYMENT SUMMARY ==="
              
              # Create summary file
              $summary = @"
              # Backend Infrastructure Deployment Summary
              
              ‚úÖ **Deployment Status**: Success
              üóìÔ∏è **Date**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
              
              ## Remote State Configuration
              - **Storage Account**: $(tfstateStorageAccount)
              - **Container**: $(tfstateContainer)
              - **State File**: $(tfstateKey)
              
              ## Infrastructure Outputs
              "@
              
              $summary | Out-File -FilePath "$(System.DefaultWorkingDirectory)\summary.md" -Encoding utf8
              
              # Get Terraform outputs
              cd $(terraformWorkingDir)
              $outputs = terraform output -json | ConvertFrom-Json
              
              

#           # üìÑ Terraform Plan and save output
#           - task: TerraformTaskV4@0
#             displayName: 'Terraform Plan'
#             inputs: 
#               provider: 'azurerm'
#               command: 'plan'
#               backendServiceArm: 'ubds-sp-connection'
#               environmentServiceNameAzureRM: 'ubds-sp-connection'
#               workingDirectory: '$(terraformWorkingDir)'
#               commandOptions: -var-file="terraform.tfvars" -out=plan.tfplan

#           - powershell: |
#               echo Listing files in $(terraformWorkingDir)
#               dir $(terraformWorkingDir)
#             displayName: 'Debug: List files after Terraform Plan'


          
#           # ‚¨ÜÔ∏è Publish plan file as pipeline artifact
#           - task: PublishPipelineArtifact@1
#             inputs: 
#               targetPath: '$(terraformWorkingDir)/plan.tfplan'
#               artifactName: 'terraform-plan'

# # ========================
# # üî∏ STAGE: Terraform Apply
# # ========================

#   - stage: ApplyBackendInfra
#     displayName: 'Apply Backend Infrastructure'
#     dependsOn: PlanBackendInfra
#     condition: succeeded()
#     jobs:
#       - job: TerraformApply
#         displayName: 'terraform Apply'
#         pool:
#           name: 'Default'
#         steps: 
#         - checkout: self

#         # ‚úÖ Ensure authenticated session
#         - task: AzureCLI@2
#           inputs:
#             azureSubscription: 'ubds-sp-connection'
#             scriptType: 'ps'
#             scriptLocation: inlineScript
#             inlineScript: |
#               Write-Host "Azure login done" 

#         # ‚¨áÔ∏è Download previously saved plan    
#         - task: DownloadPipelineArtifact@2
#           inputs:
#             artifactName: 'terraform-plan'
#             targetPath: '$(terraformWorkingDir)'
        
#         # üîß Re-init Terraform before apply (important for remote backend)
#         - task: TerraformTaskV4@0
#           displayName: 'Terraform Init'
#           inputs:
#             provider: 'azurerm'
#             command: 'init'
#             backendServiceArm: 'ubds-sp-connection'
#             backendAzureRmResourceGroupName: 'tfstate-rg-ubds'
#             backendAzureRmStorageAccountName: 'tfstateubds27567'
#             backendAzureRmContainerName: 'tfstate'
#             backendAzureRmKey: 'ubds.tfstate'
#             environmentServiceNameAzureRM: 'ubds-sp-connection'
#             workingDirectory: '$(terraformWorkingDir)'

#         # üöÄ Apply the planned Terraform changes
#         - task: TerraformTaskV4@0
#           displayName: 'Terraform Apply'
#           inputs:
#             provider: 'azurerm'
#             command: 'apply'
#             environmentServiceNameAzureRM: 'ubds-sp-connection'
#             workingDirectory: '$(terraformWorkingDir)'
#             commandOptions: '-auto-approve plan.tfplan'

#         # üßæ Extract outputs and write a summary file
#         - powershell: |
#             Write-Host "### Backend Infrastructure Deployed!" | Out-File -FilePath "$(System.DefaultWorkingDirectory)\summary.md" -Encoding utf8 -Append

#             $cosmosKey = terraform output -raw cosmosdb_primary_key 2>$null
#             if (-not $cosmosKey) {
#                 Write-Error "Error: cosmosdb_primary_key not found"
#                 exit 1
#             }

#             $funcUrl = terraform output -raw function_app_url 2>$null

#             Add-Content -Path "$(System.DefaultWorkingDirectory)\summary.md" -Value "- **Function App Name**: zch-resume-function-app"
#             Add-Content -Path "$(System.DefaultWorkingDirectory)\summary.md" -Value "‚è≥ **Next Step**: Function code will be deployed automatically"
#           displayName: 'Output Summary'
#           workingDirectory: $(terraformWorkingDir)

        
#         # üì§ Publish the summary
#         - task: PublishPipelineArtifact@1
#           inputs:
#             targetPath: '$(System.DefaultWorkingDirectory)/summary.md'
#             artifactName: 'infra-summary'