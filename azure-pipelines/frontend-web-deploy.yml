# ========================
# âœ… PIPELINE: Deploy Frontend Web Pages with Terraform
# ========================
# ðŸŽ¯ Trigger pipeline on changes to main branch and specific files

name: deploy-frontend-files

# Git trigger on specific paths and branch
trigger: 
  branches: 
    include:
      - main 
  
  paths:
    include:
      - 'frontend/iaac/**'                             # Trigger only when web files change
      - 'azure-pipelines/frontend-web-deploy.yml'   


# use local agent on windows
pool:
  name: 'Default'

variables:
  STORAGE_ACCOUNT_NAME: ubdswebstorage
  CDN_ENDPOINT_NAME: ubds-resume
  RESOURCE_GROUP_NAME: ubds-rg
  tfstateResourceGroup: 'tfstate-ubds-rg'
  tfstateStorageAccount: 'tfstateubds7270'
  tfstateContainer: 'tfstateubds'
  tfstateKey: 'ubds.tfstate'


jobs:
  - job: deploy_web_files
    displayName: Deploy Web Files
    pool:
      name: 'Default'
    
    steps:
      - checkout: self 

      # # --- Security Scanning Steps Start ---

      # - name: Install Syft
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      # - name: Generate SBOM for Frontend
      #   run: syft frontend -o json > sbom.json

      # - name: Upload SBOM Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: sbom-frontend
      #     path: sbom.json

      # - name: Install Grype
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      # - name: Run Grype Vulnerability Scan
      #   run: |
      #     grype sbom:sbom.json -o table --fail-on medium
      
      # # --- Security Scanning Steps End ---
      
      - task: AzureCLI@2
        inputs: 
          azureSubscription: 'ubds-sp-connection'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            Write-Host "Logged in to Azure CLI"
            
      - task: PowerShell@2 
        name: GetStorage
        displayName: Get Storage Account Name
        inputs:
          targetType: inline
          script: |
        
            $defaultStorage = "$(STORAGE_ACCOUNT_NAME)"

            if (!(Test-Path "frontend/iaac")) {
              Write-Host "iaac directory not found, using default storage account"
              Write-Host "##vso[task.setvariable variable=resolvedStorageAccount]$defaultStorage"
              return
            }


            cd frontend/iaac
            
            terraform init -reconfigure`
              -backend-config="resource_group_name=$(tfstateResourceGroup)" `
              -backend-config="storage_account_name=$(tfstateStorageAccount)" `
              -backend-config="container_name=$(tfstateContainer)" `
              -backend-config="key=$(tfstateKey)" `
              -input=false `
              -no-color
            Write-Host "tfstateContainer = $(tfstateContainer)"
            Write-Host "Running terraform init with backend-config container_name=$(tfstateContainer)"


            # Get the storage account name from Terraform outputs

            $storage = terraform output -raw storage_account_name 2>$null
            if (-not $storage) {
              Write-Host "Using default storage account: $defaultStorage"
              $storage = $defaultStorage
            }
            
            Write-Host "##vso[task.setvariable variable=resolvedStorageAccount]$storage"


      # TROUBLESHOOTING FIX #4: Added verification steps
      # These steps ensure the storage account exists and has static website enabled
      # before attempting to upload files, providing better error messages

      - task: PowerShell@2
        displayName: Verify Storage Account
        env:
          resolvedStorageAccount: $(resolvedStorageAccount)

        inputs:
          targetType: inline
          script: |
            $account = "$(resolvedStorageAccount)"
            $exists = az storage account show --name $account --query "name" -o tsv 2>$null
            if (-not $exists) {
              Write-Error "Storage account $account not found"
              exit 1
            }
            
          
            # Check if static website is enabled
            $staticEnabled = az storage blob service-properties show --account-name $account --query "staticWebsite.enabled" -o tsv 2>$null
            if ($staticEnabled -ne "true") {
              Write-Error "Static website not enabled on $account"
              exit 1
            }
      - task: PowerShell@2
        displayName: Upload Web Files
        env:
          resolvedStorageAccount: $(resolvedStorageAccount)

        inputs:
          targetType: inline
          script: |
            $account = "$(resolvedStorageAccount)"
            if (!(Test-Path "./frontend")) {
              Write-Error "Frontend folder not found"
              exit 1
            }

            Write-Host "Uploading to $account"
            $success = $false

            try {
              az storage blob upload-batch `
                --account-name $account `
                --auth-mode login `
                --source ./frontend `
                --destination '$web' `
                --overwrite
              $success = $true
            } catch {
              Write-Warning "Login auth failed, trying with key..."
            }

            if (-not $success) {
              $rg = az storage account show --name $account --query "resourceGroup" -o tsv
              $key = az storage account keys list --account-name $account --resource-group $rg --query "[0].value" -o tsv

              az storage blob upload-batch `
                --account-name $account `
                --account-key $key `
                --source ./frontend `
                --destination '$web' `
                --overwrite
            }

      - task: PowerShell@2
        displayName: Purge CDN Cache
        inputs:
          targetType: inline
          script: |
            $cdn = "$(CDN_ENDPOINT_NAME)"
            $profile = "$(CDN_PROFILE_NAME)"
            $rg = "$(RESOURCE_GROUP_NAME)"

            $exists = az cdn endpoint show --resource-group $rg --profile-name $profile --name $cdn --query "name" -o tsv 2>$null
            if ($exists) {
              az cdn endpoint purge `
                --resource-group $rg `
                --profile-name $profile `
                --name $cdn `
                --content-paths "/*" `
                --no-wait
            } else {
              Write-Warning "CDN endpoint not found, skipping purge"
            }

      - task: PowerShell@2
        displayName: Deployment Summary
        inputs:
          targetType: inline
          script: |
            $cdnUrl = "https://$(CDN_ENDPOINT_NAME).azureedge.net"
            Write-Host "##vso[task.setvariable variable=cdnUrl]$cdnUrl"
            Write-Host "Frontend deployed to $cdnUrl"

  # # Optional separate job for NPM audit:
  # - job: dependency_scan
  #   displayName: JavaScript Dependency Scan
  #   pool:
  #     name: 'Default'

  #     steps:
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: '22.x'

  #     - task: PowerShell@2
  #       displayName: Install Node Modules
  #       inputs:
  #         targetType: inline
  #         workingDirectory: 'frontend'
  #         script: |
  #           npm install

  #     - task: PowerShell@2
  #       displayName: NPM Audit
  #       inputs:
  #         targetType: inline
  #         workingDirectory: 'frontend'
  #         script: |
  #           npm audit --audit-level=moderate