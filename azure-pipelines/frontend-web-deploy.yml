# ========================
# âœ… PIPELINE: Deploy Frontend Web Pages with Terraform
# ========================
# ðŸŽ¯ Trigger pipeline on changes to main branch and specific files

name: deploy-frontend-files

# Git trigger on specific paths and branch
trigger: 
  branches: 
    include:
      - main 
  
  paths:
    include:
      - 'frontend/iaac/**'                             # Trigger only when web files change
      - 'azure-pipelines/frontend-web-deploy.yml'   

# use local agent on windows
pool:
  name: 'Default'

variables:
  STORAGE_ACCOUNT_NAME: ubdswebstorage
  CDN_ENDPOINT_NAME: ubds-resume
  CDN_PROFILE_NAME: ubds-cdn-profile
  RESOURCE_GROUP_NAME: ubds-rg
  tfstateResourceGroup: 'tfstate-ubds-rg'
  tfstateStorageAccount: 'tfstateubds7270'
  tfstateContainer: 'tfstateubds'
  tfstateKey: 'frontend.tfstate'

jobs:
  - job: deploy_web_files
    displayName: Deploy Web Files
    pool:
      name: 'Default'
    
    steps:
      - checkout: self 

      # --- Security Scanning Steps Start ---

      - task: PowerShell@2
        displayName: Generate SBOM
        inputs:
          targetType: inline
          workingDirectory: '$(Build.SourcesDirectory)'
          script: |
            $sbomPath = Join-Path -Path "$(Build.SourcesDirectory)\frontend" -ChildPath "sbom.json"
            
            # Generate SBOM directly to file without encoding issues
            & syft frontend --output json=$sbomPath
            
            # Verify the file exists
            if (Test-Path $sbomPath) {
              Write-Output "sbom.json created successfully at: $sbomPath"
              
              # Display file size for verification
              $fileInfo = Get-Item $sbomPath
              Write-Output "File size: $($fileInfo.Length) bytes"
              
              # Optionally validate JSON format
              try {
                $jsonContent = Get-Content $sbomPath -Raw | ConvertFrom-Json
                Write-Output "JSON validation successful"
              } catch {
                Write-Error "JSON validation failed: $_"
              }
            } else {
              Write-Error "sbom.json NOT found at expected path."
              exit 1
            }

      - task: PowerShell@2
        displayName: Scan SBOM with Grype
        inputs:
          targetType: inline
          workingDirectory: '$(Build.SourcesDirectory)\frontend'
          script: |
            # Run Grype scan on the SBOM
            Write-Output "Running Grype scan on SBOM..."
            
            grype sbom:sbom.json -o table --fail-on medium


      - task: PublishBuildArtifacts@1
        displayName: Upload SBOM Artifact
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)\frontend\sbom.json'
          ArtifactName: 'sbom-frontend'

      - task: PowerShell@2
        displayName: List files in frontend folder after scanning
        inputs:
          targetType: inline
          script: |
            Write-Output "Listing files in frontend folder:"
            Get-ChildItem "$(Build.SourcesDirectory)\frontend" | Format-Table Name, Length, LastWriteTime

      # --- Security Scanning Steps End ---
      
      - task: AzureCLI@2
        name: AzureLodin
        inputs: 
          azureSubscription: 'ubds-sp-connection'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            Write-Host "Logged in to Azure CLI"
            
      - task: PowerShell@2 
        name: GetStorage
        displayName: Get Storage Account Name
        inputs:
          targetType: inline
          script: |
        
            $defaultStorage = "$(STORAGE_ACCOUNT_NAME)"

            if (!(Test-Path "frontend/iaac")) {
              Write-Host "iaac directory not found, using default storage account"
              Write-Host "##vso[task.setvariable variable=resolvedStorageAccount]$defaultStorage"
              return
            }

            Write-Host "###[group]Terraform Init"
            Set-location frontend/iaac
            
            Write-Host "Terraform location:"
            Get-Command terraform | Format-List
            terraform version

            terraform init `
              -reconfigure `
              "-backend-config=resource_group_name=$(tfstateResourceGroup)" `
              "-backend-config=storage_account_name=$(tfstateStorageAccount)" `
              "-backend-config=container_name=$(tfstateContainer)" `
              "-backend-config=key=$(tfstateKey)" `
              -input=false `
              -no-color

            if ($LASTEXITCODE -ne 0) {
              Write-Error "Terraform init failed"
              exit 1
            }
            
            Write-Host "##[endgroup]"

            Write-Host "##[group]DEBUG: List all terraform outputs"
            terraform output
            Write-Host "##[endgroup]"
            
            Write-Host "##[group]Getting Storage Account Output"
            try {
              $storage = terraform output -raw storage_account_name
              if (-not $storage) {
                throw "Empty storage account output"
              }
            } catch {
              Write-Warning "Terraform output failed or missing; falling back to default storage account"
              $storage = $defaultStorage
            }

            Write-Host "Using resolved storage account: $storage"
            Write-Host "##vso[task.setvariable variable=resolvedStorageAccount]$storage"
            Write-Host "##[endgroup]"

            
      # TROUBLESHOOTING FIX #4: Added verification steps

      - task: PowerShell@2
        displayName: Verify Storage Account
        env:
          resolvedStorageAccount: $(resolvedStorageAccount)
        inputs:
          targetType: inline
          script: |
            Write-Host "##[group]Verify Storage Account and Static Website"

            $account = "$(resolvedStorageAccount)"
            Write-Host "Checking existence of storage account: $account"
            try {
              $exists = az storage account show --name $account --query "name" -o tsv
              if (-not $exists) {
                Write-Error "Storage account $account not found"
                exit 1
              }

            } catch {
              Write-Error "Failed to verify storage account: $_"
              exit 1
            }

            Write-Host "Checking if static website is enabled on $account"
            try {
              $staticEnabled = az storage blob service-properties show --account-name $account --query "staticWebsite.enabled" -o tsv
              if ($staticEnabled -ne "true") {
                Write-Error "Static website not enabled on $account"
                exit 1
              }
            } catch {
              Write-Error "Failed to get static website status: $_"
              exit 1
            }

            Write-Host "Static website is enabled on $account"
            Write-Host "##[endgroup]"

      # --- Upload Web Files -----
      - task: AzureCLI@2
        displayName: Upload Web Files
        inputs:
            azureSubscription: 'ubds-sp-connection'
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $account = "$(resolvedStorageAccount)"
              Write-Host "Uploading files to storage account: $account"
              
              # List of file extensions to upload
              $extensions = @("*.html", "*.css", "*.js", "*.json", "*.png", "*.jpg", "*.jpeg", "*.gif", "*.svg", "*.ico")
              
              foreach ($ext in $extensions) {
                Write-Host "Uploading files with pattern: $ext"
                
                # Check if files exist before uploading
                $files = Get-ChildItem -Path ./frontend -Filter $ext -Recurse | 
                  Where-Object { $_.FullName -notlike "*\iaac\*" }
                
                if ($files.Count -gt 0) {
                  az storage blob upload-batch `
                    --account-name $account `
                    --auth-mode login `
                    --source ./frontend `
                    --destination '$web' `
                    --pattern $ext `
                    --overwrite
                }
              }
              
              Write-Host "Upload completed"

      # ---- Purge CDN cache-----
      - task: PowerShell@2
        displayName: Purge CDN Cache
        inputs:
          targetType: inline
          script: |
            Write-Host "##[group]Purge CDN Cache"

            $cdn = "$(CDN_ENDPOINT_NAME)"
            $profile = "$(CDN_PROFILE_NAME)"
            $rg = "$(RESOURCE_GROUP_NAME)"

            Write-Host "Checking CDN endpoint $cdn in profile $profile and resource group $rg"
            $exists = az cdn endpoint show --resource-group $rg --profile-name $profile --name $cdn --query "name" -o tsv 2>$null

            if ($exists) {
              Write-Host "Purging CDN cache for endpoint $cdn"
              az cdn endpoint purge `
                --resource-group $rg `
                --profile-name $profile `
                --name $cdn `
                --content-paths "/*" `
                --no-wait
            } else {
              Write-Warning "CDN endpoint not found, skipping purge"
            }
            Write-Host "##[endgroup]"

      # ---- Deployment Summary -------
      - task: PowerShell@2
        displayName: Deployment Summary
        inputs:
          targetType: inline
          script: |
            $cdnUrl = "https://$(CDN_ENDPOINT_NAME).azureedge.net"
            Write-Host "##vso[task.setvariable variable=cdnUrl]$cdnUrl"
            Write-Host "Frontend deployed to $cdnUrl"

  # # Optional separate job for NPM audit:
  # - job: dependency_scan
  #   displayName: JavaScript Dependency Scan
  #   pool:
  #     name: 'Default'

  #     steps:
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: '22.x'

  #     - task: PowerShell@2
  #       displayName: Install Node Modules
  #       inputs:
  #         targetType: inline
  #         workingDirectory: 'frontend'
  #         script: |
  #           npm install

  #     - task: PowerShell@2
  #       displayName: NPM Audit
  #       inputs:
  #         targetType: inline
  #         workingDirectory: 'frontend'
  #         script: |
  #           npm audit --audit-level=moderate