name: Deploy Backend Function

# -----------------------------------------------------------------------------
# Triggers:
# - On push to main branch affecting 'backend/' or this workflow file
# - Manually (workflow_dispatch)
# - After 'Backend Infrastructure' workflow completes successfully
# -----------------------------------------------------------------------------

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

  workflow_dispatch:

  workflow_run:
    workflows: ["Backend Infrastructure"]
    types:
      - completed

jobs:
  deploy-function:
    name: Deploy Function Code
    runs-on: ubuntu-latest
    # Only run if infrastructure workflow succeeded OR triggered manually or via push
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # ---------------------- Early Secret Masking ----------------------
      - name: Mask Secrets
        run: |
          echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"
          echo "::add-mask::${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      # -----------------------------------------------------------------

      # --------------------------- SBOM + Grype Security Steps -----------------------------
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM (Software Bill of Materials)
        run: syft backend -o json > sbom.json

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      - name: Install Grype (vulnerability scanner)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan for Vulnerabilities with Grype
        run: |
          grype sbom:sbom.json --fail-on critical -o table
      # ------------------------------------------------------------------------

      # --------------------- Set up Azure----------------------

      - name: Setup Azure Functions Core Tools
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y azure-functions-core-tools-4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ------------------------------------------------------------------------

      # --------------------- Deploy and Test Function----------------------

      - name: Deploy Function
        working-directory: backend
        run: |
          pip install -r requirements.txt
          func azure functionapp publish zch-resume-function-app --python

      - name: Test Function
        run: |
          echo "### Testing Function Deployment 🧪" >> $GITHUB_STEP_SUMMARY
          sleep 30
          response=$(curl -s https://zch-resume-function-app.azurewebsites.net/api/VisitorCounter?visitorId=test123)
          status=$?
          if [ $status -eq 0 ]; then
            echo "- ✅ Function is responding" >> $GITHUB_STEP_SUMMARY
            echo "- Response: \`$response\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Function test failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      # ------------------------ Optional Debug/Test Info ----------------------    
      - name: Find test files
        run: |
          echo "Looking for test files..."
          find . -name "*test*.py" -type f || echo "No test files found"

      - name: Check backend structure
        run: |
          echo "Backend directory contents:"
          ls -la backend/

      - name: List backend tests folder
        working-directory: backend
        run: ls -l tests/ || echo "No tests folder found"
      
       # ------------------------------------------------------------------------

      - name: Run Backend Auth Tests (if exists)
        working-directory: backend
        run: |
          if [ -f "tests/auth_tests.py" ]; then
            pip install pytest requests
            pytest tests/auth_tests.py
          else
            echo "auth_tests.py not found in backend/tests/"
            echo "Current directory structure:"
            find . -name "*.py" -type f
          fi
