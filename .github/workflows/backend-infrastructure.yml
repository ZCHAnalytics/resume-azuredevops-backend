name: Backend Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'iaac/**'                             # Trigger only when infra files change
      - '.github/workflows/backend-infrastructure.yml'
  workflow_dispatch:                          # Allow manual triggering from GitHub UI

jobs:
  plan-backend-infra:
    name: Plan Backend Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3            # Pulls repo code into runner

      - name: List files # Skip in Production
        run: ls -R                            # Useful for debugging, remove in prod

      - name: Mask GitHub Token
        run: echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"  # Hide GitHub token in logs

      - name: Mask Azure Subscription ID
        run: echo "::add-mask::${{ secrets.AZURE_SUBSCRIPTION_ID }}"  # Hide sub ID in logs

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # JSON secret containing SP credentials

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2   # Installs Terraform CLI

      - name: Terraform Init
        working-directory: iaac
        run: terraform init                  # Prepares Terraform backend

      - name: Terraform Plan
        working-directory: iaac
        # env:
        #  TF_LOG: DEBUG                     # Uncomment for debugging issues
        #  TF_LOG_PATH: terraform.log        # Save detailed logs to file
        run: terraform plan -no-color -var-file="terraform.tfvars" -out=plan.tfplan
        # -no-color avoids ANSI codes in logs
        # -var-file is where we pass tfvars config 
        # -out allows the plan to be reused without re-evaluation

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4     # Saves the plan for the apply stage
        with:
          name: terraform-plan
          path: iaac/plan.tfplan

  apply-backend-infra:
    name: Apply Backend Infrastructure
    runs-on: ubuntu-latest
    needs: plan-backend-infra                # Waits for planning job

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Mask Azure Subscription ID
        run: echo "::add-mask::${{ secrets.AZURE_SUBSCRIPTION_ID }}"  # Hide sub ID

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Auth to Azure with SP

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2   # Ensure Terraform is available

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4   # Retrieve saved plan file
        with:
          name: terraform-plan
          path: iaac

      - name: Terraform Init
        working-directory: iaac
        run: terraform init                  # Needed again in apply stage

      - name: Terraform Apply
        working-directory: iaac
        run: terraform apply -no-color -auto-approve plan.tfplan
        # -no-color keeps logs clean
        # -auto-approve skips confirmation prompts

      - name: Debug Terraform Outputs
        working-directory: iaac
        run: |
          echo "🔍 Terraform Outputs (raw):"
          # terraform output -json           # Uncomment only for debugging
          # Avoid printing sensitive keys here

      - name: Output Details
        working-directory: iaac
        run: |
          echo "### Backend Infrastructure Deployed! 🔧" >> $GITHUB_STEP_SUMMARY

          # Print safe outputs only
          echo "- **CosmosDB**: $(terraform output -raw cosmosdb_endpoint)" >> $GITHUB_STEP_SUMMARY

          # Extract Cosmos DB key silently without printing it
          Cosmos_KEY=$(terraform output -json | jq -r .cosmosdb_primary_key.value)

          # Print function URL only if valid (starts with https:// and has no spaces)
          echo "- **Function App**: $(terraform output -raw function_app_url | grep -E '^https://[^ ]+$')" >> $GITHUB_STEP_SUMMARY

          echo "- **Function App Name**: zch-resume-function-app" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏳ **Next Step**: Function code will be deployed automatically" >> $GITHUB_STEP_SUMMARY
